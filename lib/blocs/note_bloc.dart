import 'package:rx_dart_notes/core/models/note_model.dart';import 'package:rx_dart_notes/core/models/note_response_model.dart';import 'package:rx_dart_notes/core/repository/NoteRepository.dart';import 'package:rxdart/rxdart.dart';import 'dart:developer' as developer;class NoteBloc {  final NoteRepository _repository = NoteRepository();  final BehaviorSubject<NoteResponseModel> _noteResponseSubject = BehaviorSubject<NoteResponseModel>();  final BehaviorSubject<List<NoteModel>> _noteSubject = BehaviorSubject<List<NoteModel>>();  getNote() async {    developer.log('GET NOTE', name: 'BLOC');    NoteResponseModel response = await _repository.getNote();    _noteResponseSubject.sink.add(response);    _noteSubject.sink.add(response.results as List<NoteModel>);  }  createNote(NoteModel newNote) async {    NoteResponseModel response = await _repository.createNote(newNote);    _noteSubject.sink.add([..._noteSubject.value, ...response.results]);  }  updateNote(NoteModel updatedNote) async {    developer.log('UPDATE NOTE', name: 'BLOC');    NoteResponseModel response = await _repository.updateNote(updatedNote);    noteObservable.value[response.results[0].id - 1] = response.results[0];    _noteSubject.sink.add(noteObservable.value);  }  deleteNote(NoteModel deletedNote) async {    developer.log('DELETE NOTE', name: 'BLOC');    developer.log('TOTAL ${noteObservable.value.length}', name: 'BLOC');    NoteResponseModel response = await _repository.deleteNote(deletedNote);    noteObservable.value.removeWhere((item) => item.id == response.results[0].id);    developer.log('DELETE OK', name: 'BLOC');    developer.log('TOTAL ${noteObservable.value.length}', name: 'BLOC');    _noteSubject.sink.add(noteObservable.value);  }  dispose() {    _noteResponseSubject.close();  }  BehaviorSubject<NoteResponseModel> get noteResponseReplicat => _noteResponseSubject;  BehaviorSubject<List<NoteModel>> get noteObservable => _noteSubject;}final bloc = NoteBloc();
import 'dart:convert';import 'package:rx_dart_notes/core/models/note_model.dart';import 'package:rx_dart_notes/core/models/note_response_model.dart';import 'package:rx_dart_notes/core/repository/NoteRepository.dart';import 'package:rxdart/rxdart.dart';import 'dart:developer' as developer;class NoteBloc {  final NoteRepository _repository = NoteRepository();  final BehaviorSubject<NoteResponseModel> _noteResponseSubject = BehaviorSubject<NoteResponseModel>();  getNote() async {    NoteResponseModel response = await _repository.getNote();    _noteResponseSubject.sink.add(response);  }  createNote(NoteModel newNote) async {    developer.log('JE SUIS DANS LE BLOC CREATE DEBUT', name: 'BLOC');    NoteResponseModel response = await _repository.createNote(newNote);    developer.log('JE SUIS DANS LE BLOC CREATE FIN', name: 'BLOC');    // _noteSubject.value    // developer.log(jsonEncode(_noteSubject.last), name: 'BLOC');    // value.results = [...value.results, ...response.results];    // var aaa = _noteResponseSubject.stream.listen((event) => event);    developer.log('////////////////', name: 'BLOC');    developer.log(jsonEncode(subject.value.results), name: 'BLOC');    developer.log('////////////////', name: 'BLOC');    // _noteSubject.stream.listen((value) {    //   print('Observer2: $value');    // });    // concat ici peut etre    // _noteSubject.sink.add(response);  }  dispose() {    _noteResponseSubject.close();  }  BehaviorSubject<NoteResponseModel> get subject => _noteResponseSubject;}final bloc = NoteBloc();
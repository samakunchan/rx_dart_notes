import 'package:http/http.dart' as http;import 'package:rx_dart_notes/core/models/note_response_model.dart';import 'dart:convert';import 'dart:developer' as developer;import '../models/note_model.dart';class NoteService {  final url = Uri.parse('http://10.0.2.2:3000/notes');  Future<NoteResponseModel> getNotesResponseList() async {    try{      final response = await http.get(url);      Map<String, dynamic> fieldsMap = {};      fieldsMap['message'] = 'No error';      fieldsMap['results'] = jsonDecode(response.body);      fieldsMap['error'] = false;      // fieldsMap['datas'] = NoteModel.fromJson(jsonDecode(response.body));      // developer.log(jsonEncode(fieldsMap), name: 'SERVICE NOTES getNotesList');      // developer.log('YOOOOOOOOOO', name: 'SERVICE NOTES getNotesList');      return NoteResponseModel.fromJson(fieldsMap);    }catch (error, stacktrace){      Map<String, dynamic> fieldsMap = {};      fieldsMap['results'] = [];      fieldsMap['error'] = true;      fieldsMap['message'] = 'Un problème est survenue lors de la récupération des données: \n - $error \n - $stacktrace';      return NoteResponseModel.withError(fieldsMap);    }  }  Future<NoteResponseModel> createOneNote(NoteModel newNote) async {    try{      final response = await http.post(        url,        headers: {'Content-type': 'application/json'},        body: jsonEncode(<String, String>{          'title': newNote.title,          'description': newNote.description,          'createdAt': newNote.createdAt.toString(),          'updatedAt': newNote.updatedAt.toString(),        }),      );      Map<String, dynamic> fieldsMap = {};      fieldsMap['message'] = 'No error';      fieldsMap['error'] = false;      fieldsMap['results'] = [jsonDecode(response.body)];      developer.log('Status code: ${response.statusCode}', name: 'SERVICE NOTES Create note');      developer.log(jsonEncode(fieldsMap), name: 'SERVICE NOTES Create note');            return NoteResponseModel.fromJson(fieldsMap);    }catch (error, stacktrace){      Map<String, dynamic> fieldsMap = {};      fieldsMap['results'] = [];      fieldsMap['error'] = true;      fieldsMap['message'] = 'Un problème est survenue lors de la création des données: \n - $error \n - $stacktrace';      return NoteResponseModel.withError(fieldsMap);    }  }  // Future<NoteResponseModel> createNotesList(NoteModel newNote) async {  //   final response = await http.post(  //     url,  //     headers: {'Content-type': 'application/json'},  //     body: jsonEncode(<String, String>{  //       'title': newNote.title,  //       'description': newNote.description,  //       'createdAt': newNote.createdAt.toString(),  //       'updatedAt': newNote.updatedAt.toString(),  //     }),  //   );  //   // print(response.statusCode);  //   developer.log('Status code: ' + jsonEncode(response.statusCode), name: 'CONSOLE.LOG SERVICE');  //   if (response.statusCode == 201) {  //     developer.log('Création réussi...', name: 'CONSOLE.LOG SERVICE');  //     developer.log('///////////////////', name: 'CONSOLE.LOG SERVICE');  //  //     Map<String, dynamic> fieldsMap = {};  //     fieldsMap['error'] = false;  //     fieldsMap['message'] = 'No error';  //     fieldsMap['datas'] = jsonDecode(response.body);  //     developer.log(jsonEncode(fieldsMap), name: 'CONSOLE.LOG SERVICE');  //  //     return NoteResponseModel.fromJson(fieldsMap);  //   } else {  //     Map<String, dynamic> fieldsMap = {};  //     fieldsMap['datas'] = [];  //     fieldsMap['error'] = true;  //     fieldsMap['message'] = 'Un problème est survenue lors de la création de la note.';  //  //     return NoteResponseModel.fromJson(fieldsMap);  //   }  // }}
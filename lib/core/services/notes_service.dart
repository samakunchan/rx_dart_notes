import 'package:http/http.dart' as http;import 'package:rx_dart_notes/core/models/note_response_model.dart';import 'dart:convert';import 'dart:developer' as developer;import '../models/note_model.dart';class NoteService {  final url = Uri.parse('http://localhost:3000/notes');  Future<NoteResponseModel> getNotesResponseList() async {    try{      final response = await http.get(url);      Map<String, dynamic> fieldsMap = {};      fieldsMap['message'] = 'No error';      fieldsMap['results'] = jsonDecode(response.body);      fieldsMap['error'] = false;      // fieldsMap['datas'] = NoteModel.fromJson(jsonDecode(response.body));      developer.log('YOOOOOOOOOO', name: 'SERVICE NOTES getNotesList');      developer.log(jsonEncode(fieldsMap), name: 'SERVICE NOTES getNotesList');      return NoteResponseModel.fromJson(fieldsMap);    }catch (error, stacktrace){      developer.log('A ETE CATCH', name: 'SERVICE NOTES getNotesList');      developer.log('$error', name: 'SERVICE NOTES getNotesList');      Map<String, dynamic> fieldsMap = {};      fieldsMap['results'] = [];      fieldsMap['error'] = true;      fieldsMap['message'] = 'Un problème est survenue lors de la récupération des données: \n - $error \n - $stacktrace';      return NoteResponseModel.withError(fieldsMap);    }  }  Future<NoteResponseModel> createOneNote(NoteModel newNote) async {    try{      final response = await http.post(        url,        headers: {'Content-type': 'application/json'},        body: jsonEncode(<String, String>{          'title': newNote.title,          'description': newNote.description,          'createdAt': newNote.createdAt.toString(),          'updatedAt': newNote.updatedAt.toString(),        }),      );      Map<String, dynamic> fieldsMap = {};      fieldsMap['message'] = 'No error';      fieldsMap['error'] = false;      fieldsMap['results'] = [jsonDecode(response.body)];      developer.log('Status code: ${response.statusCode}', name: 'SERVICE NOTES Create note');      developer.log(jsonEncode(fieldsMap), name: 'SERVICE NOTES Create note');            return NoteResponseModel.fromJson(fieldsMap);    }catch (error, stacktrace){      Map<String, dynamic> fieldsMap = {};      fieldsMap['results'] = [];      fieldsMap['error'] = true;      fieldsMap['message'] = 'Un problème est survenue lors de la création des données: \n - $error \n - $stacktrace';      return NoteResponseModel.withError(fieldsMap);    }  }  Future<NoteResponseModel> updateOneNote(NoteModel updatedNote) async {    developer.log('UPDATE NOTE', name: 'SERVICE');    developer.log(jsonEncode(        {          'id': updatedNote.id,          'title': updatedNote.title,          'description': updatedNote.description        }    ), name: 'SERVICE');    try{      final response = await http.patch(        url,        headers: {'Content-type': 'application/json'},        body: jsonEncode(          {            'id': updatedNote.id,            'title': updatedNote.title,            'description': updatedNote.description          }        ),      );      developer.log('Status code: ${response.statusCode}', name: 'SERVICE NOTES Update note');      Map<String, dynamic> fieldsMap = {};      fieldsMap['message'] = 'No error';      fieldsMap['error'] = false;      fieldsMap['results'] = [jsonDecode(response.body)];      developer.log(jsonEncode(response.body), name: 'FIELDMAP');      return NoteResponseModel.fromJson(fieldsMap);    }catch (error, stacktrace){      developer.log('A UN PROBLEME', name: 'SERVICE');      developer.log('$error', name: 'SERVICE');      developer.log('$stacktrace', name: 'SERVICE');      Map<String, dynamic> fieldsMap = {};      fieldsMap['results'] = [];      fieldsMap['error'] = true;      fieldsMap['message'] = 'Un problème est survenue lors de la mise à jour des données: \n - $error \n - $stacktrace';      return NoteResponseModel.withError(fieldsMap);    }  }}